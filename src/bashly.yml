name: tfww
help: terraform workspace wrapper
version: 0.3.1

dependencies : [ terraform ]
commands:
- name: update
  help: update latest release
  dependencies: [ jq ]
- name: completions
  help: eval "\$(tfww completions)" in .bashrc

- name: plan
  help: plan with switching terraform workspace
  flags:
  - long: --all
    help: plan all envs/*.tfvars
  - long: --destroy
    short: -D
    help: plan destroy
  - long: --refresh-only
    short: -R
    help: plan refresh-only
  args:
  - name: file
    validate: tfvars
    help: envs/\$workspace.tfvars
  completions:
  - $(ls envs/*.tfvars 2>/dev/null)
  examples: |-
    Plan
    - tfww plan envs/\$workspace.tfvars
    - tfww plan --all
    
    Plan destroy (--destroy/-D)
    - tfww plan --destroy envs/\$workspace.tfvars
    - tfww plan --all -D
    
    Plan refresh (--refresh-only/-R)
    - tfww plan -R envs/\$workspace.tfvars
    - tfww plan --all -R

- name: apply
  help: apply with switching terraform workspace
  flags:
  - long: --plan-all
    help: apply all plans/*.tfplan
    conflicts: [--all, --destroy, --refresh-only, --auto-approve]
  - long: --auto-approve
    short: -y
    help: skip interactive approval of plan before applying
    conflicts: [--plan-all]
  - long: --all
    help: apply all envs/*.tfvars
    conflicts: [--plan-all]
  - long: --destroy
    short: -D
    conflicts: [--plan-all, --refresh-only]
    help: plan destroy. (tfvars only)
  - long: --refresh-only
    short: -R
    conflicts: [--plan-all, --destroy]
  args:
  - name: file
    validate: tfvars_or_tfplan
    help: envs/\$workspace.tfvars or plans/\$workspace.tfplan
  completions:
  - $(ls envs/*.tfvars plans/*.tfplan 2>/dev/null)
  examples: |-
    Apply (tfplan)
    - tfww apply plans/\$workspace.tfplan
    - tfww apply --plan-all
    
    Apply
    - tfww apply envs/\$workspace.tfvars
    - tfww apply --all
    - tfww apply --all -y
    
    Destroy(--destroy/-D)
    - tfww apply --destroy envs/\$workspace.tfvars
    - tfww apply --all -D
    - tfww apply --all -D -y
    
    Refresh(--refresh-only/-R)
    - tfww apply --refresh-only envs/\$workspace.tfvars
    - tfww apply --all -R
    - tfww apply --all -R -y

- name: switch
  help: switch or create terraform workspace
  args:
  - name: file
    required: true
    validate: tfvars_or_tfplan
    help: envs/\$workspace.tfvars or plans/\$workspace.tfplan
  completions:
  - $(ls envs/*.tfvars plans/*.tfplan 2>/dev/null)
  examples:
  - tfww switch envs/\$workspace.tfvars
  - tfww switch plans/\$workspace.tfplan

- name: show
  help: show state or plan with swtiching terraform workspace
  flags:
  - long: --json
    short: -j
    help: output the plan or state in json
  args:
  - name: file
    required: true
    validate: tfvars_or_tfplan
    help: envs/\$workspace.tfvars plans/\$workspace.tfplan
  completions:
  - $(ls envs/*.tfvars plans/*.tfplan 2>/dev/null)
  examples:
  - tfww show plans/\$workspace.tfplan
  - tfww show envs/\$workspace.tfvars

- name: push
  help: manually push tfstate for migrate from other terraform project.
  flags:
  - long: --all
    help: push all .tfstate files in migrates/*.tfstate
  - long: --force
    short: -f
  - long: --ignore-remote-version
    short: -r
  args:
  - name: file
    validate: tfstate
    help: migrates/\${workspace}.tfstate 
  completions:
  - $(ls migrates/*.tfstate 2>/dev/null)
  examples: |-
    ```
    .
    ├── 000001
    │   └── workload
    │       ├── main.tf
    │       └── terraform.tfvars
    ├── 000002
    │   └── workload
    │       ├── main.tf
    │       └── terraform.tfvars
    └── 000003
        └── workload
            ├── main.tf
            └── terraform.tfvars
    ```
    
    base_dir="path/to/new_root"
    mkdir -p \$base_dir/{envs,plans,migrates}
    for f in */workload/terraform.tfvars ; do
      from_dir="\$(dirname "\$f")"
      ws="\$(dirname "\$from_dir")"
      terraform -chdir=\$from_dir apply -refresh-only -auto-approval
      terraform -chdir=\$from_dir state pull > \$base_dir/migrates/\$ws.tfstate
      cp $f \$base_dir/envs/\$ws.tfvars
      # and/or edit \$ws.tfvars
    done
    tfww push --all -f
    tfww plan --all # Check no chages.
