name: tfww
help: terraform workspace wrapper
version: 0.1.2

commands:
- name: completions
  help: eval "\$(tfww completions)" in .bashrc

- name: plan
  help: switch terraform workspace and plan
  flags:
  - long: --all
    help: plan all envs/*.tfvars
  - long: --destroy
    short: -D
    help: plan destroy
  - long: --refresh-only
    short: -R
    help: plan refresh-only
  args:
  - name: file
    validate: tfvars
    help: envs/\$workspace.tfvars
  completions:
  - $(ls envs/*.tfvars 2>/dev/null)

- name: apply
  help: switch terraform workspace and apply
  flags:
  - long: --all
    help: apply all envs/*.tfvars
    conflicts: [--plan-all]
  - long: --plan-all
    help: apply all plans/*.tfplan
    conflicts: [--all, --destroy]
  - long: --destroy
    short: -D
    conflicts: [--plan-all]
    help: plan destroy. (tfvars only)
  args:
  - name: file
    validate: tfvars_or_tfplan
    help: envs/\$workspace.tfvars or plans/\$workspace.tfplan
  completions:
  - $(ls envs/*.tfvars plans/*.tfplan 2>/dev/null)

- name: switch
  help: switch or create terraform workspace
  args:
  - name: file
    required: true
    validate: tfvars_or_tfplan
    help: envs/\$workspace.tfvars or plans/\$workspace.tfplan
  completions:
  - $(ls envs/*.tfvars plans/*.tfplan 2>/dev/null)

- name: show
  help: swtich terraform workspace and show state or plan
  flags:
  - long: --json
    short: -j
    help: output the plan or state in json
  args:
  - name: file
    required: true
    validate: tfvars_or_tfplan
    help: envs/\$workspace.tfvars plans/\$workspace.tfplan
  completions:
  - $(ls envs/*.tfvars plans/*.tfplan 2>/dev/null)

- name: push
  help: tfstate manually push. for migrate non-workspace to workspace.
  flags:
  - long: --all
    help: push all .tfstate files in migrates/*.tfstate
  - long: --force
    short: -f
  - long: --ignore-remote-version
    short: -r
  args:
  - name: file
    validate: tfstate
    help: migrates/\${workspace}.tfstate 
  completions:
  - $(ls migrates/*.tfstate 2>/dev/null)
