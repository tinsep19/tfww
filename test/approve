#!/usr/bin/env bash
# Run this from the root directory

cd ./test || exit
source approvals.bash

workspace_shoud_be () {
  local expect="$1"
  local actual="$(terraform workspace show)"
  [[ "$actual" == "$expect" ]] || fail "expect $expect but $actual"
}

# Update me
cli=../tfww

# Tests (context, describe and indentation are optional)

# Clean up.
it "Clean up"
  rm -rf .terraform terraform.tfstate.d
  rm -f .terraform.lock.hcl
  rm -rf plans envs out

# Setup
it "Set up"
  mkdir -p plans
  mkdir -p envs
  echo "input-1 = \"this\"" > envs/test-1.tfvars
  approve "find . -type f | grep -v approvals | sort" "test_asset_list_excludes_approvals"
  workspace_shoud_be "default"

describe "root command"
  approve "$cli --help" "expect_root_help"

context "terraform"
  approve "terraform -version" "supprt_terraform_version"
  approve "terraform init" "support_providers"
  workspace_shoud_be "default"

describe "switch command"
  approve "$cli switch --help" "expect_switch_help"

  context "target file is tfvars"
    approve "$cli switch envs/test-1.tfvars" "expect_switch_test-1"
    workspace_shoud_be "test-1"

  context "target file is tfplan, but corresponding tfvars is missing"
    touch plans/test-2.tfplan
    approve "$cli switch plans/test-2.tfplan" "expect_unmatch_switch_test-2"
    workspace_shoud_be "test-1"

  context "target file is not exist"
    approve "$cli switch envs/nothing.tfvars" "expect_not_exist_msg"
    workspace_shoud_be "test-1"

  context "mismatch file is specified"
    touch envs/mismatch.tfplan
    approve "$cli switch envs/mismatch.tfplan" "expect_mismatch_msg"
    workspace_shoud_be "test-1"
    rm envs/mismatch.tfplan

  context "target file is same at switch last"
    approve "$cli switch envs/test-1.tfvars" "expect_nothing_to_do"
    workspace_shoud_be "test-1"

describe "plan command"
  approve "$cli plan --help" "expect_plan_help"

  approve "$cli plan envs/test-1.tfvars" "plan_out_test-1"
  expect_exit_code 2
  workspace_shoud_be "test-1"

describe "show command"
  approve "$cli show --help" "expect_show_help"

  context "target file is tfplan"
    approve "$cli show plans/test-1.tfplan" "test-1_state_plan"

  context "target file is tfvars"
    approve "$cli show envs/test-1.tfvars" "test-1_state_before"

describe "apply command"
  approve "$cli apply --help" "expect_apply_help"

  context "target file is tfplan"
    approve "$cli apply plans/test-1.tfplan" "apply_test-1"
    expect_exit_code 0
    [[ -f out/test-1/content.txt ]] || fail "Expect success apply"   

describe "plan --all with various situations."
  context "--all continue on exit code was non-zero."
    echo "input-1 = \"changes\""   > envs/test-1.tfvars
    echo "input-2 = \"incorrect\"" > envs/test-2.tfvars
    echo "input-1 = \"test-3\""    > envs/test-3.tfvars
    it "list results as tfvars file, plan status"
    approve "$cli plan --all" "plan_all_with_various_situations"
    
